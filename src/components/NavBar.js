import React from "react";
import { Link } from "react-router-dom";
import "../navbar.css";
class NavBar extends React.Component {
  state = { search: "", results: [], isChecked: false };
  findData = (inputValue) => {
    const newArr = this.props.allData.filter((place) => {
      return (
        place.city.toLowerCase().includes(inputValue) ||
        place.state.toLowerCase().includes(inputValue) ||
        place.county.toLowerCase().includes(inputValue) ||
        place.zip_code.toString().toLowerCase().includes(inputValue)
      );
    });
    return newArr;
  };
  clearSearch = () => {
    if (this.state.results.length > 0) {
      this.setState({ search: "", results: [] });
    }
  };
  componentDidMount() {
    window.addEventListener("click", this.clearSearch);
  }
  componentWillUnmount() {
    window.removeEventListener("click", this.clearSearch);
  }
  render() {
    return (
      <nav>
        <div className="navbar-wrapper">
          <div className="nav-icon">
            <svg
              viewBox="0 0 208 101"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g clipPath="url(#clip0_9_2)">
                <path d="M228.8 -86.8H-20.8V162.8H228.8V-86.8Z" fill="white" />
                <path d="M228.8 -86.8H-20.8V162.8H228.8V-86.8Z" fill="white" />
                <path d="M228.8 -86.8H-20.8V162.8H228.8V-86.8Z" fill="white" />
                <path
                  d="M23.5668 28.783C18.0136 28.783 14.4321 31.8055 14.2545 36.609H19.175C19.3158 34.4098 20.9538 33.0253 23.4238 33.0253C25.9111 33.0253 27.5036 34.3232 27.5036 36.3642C27.5036 38.442 25.8656 39.8503 23.4476 39.8503H20.345V43.8045H23.5018C26.3618 43.8045 28.1038 45.1803 28.1038 47.3947C28.1038 49.557 26.2513 51.0498 23.5906 51.0498C20.8606 51.0498 19.0385 49.6978 18.8803 47.5507H13.7865C14.0161 52.3325 17.8533 55.4655 23.5386 55.4655C29.341 55.4655 33.54 52.2437 33.54 47.7955C33.54 44.4502 31.3517 42.1297 27.859 41.7483V41.4298C30.6973 40.8513 32.5498 38.5612 32.5498 35.6275C32.5498 31.6322 28.7885 28.783 23.5668 28.783ZM47.9548 28.783C41.3205 28.783 37.3338 33.8833 37.3338 42.3095C37.3338 45.7892 38.0597 48.7077 39.4701 50.87C41.2143 53.8448 44.1805 55.4633 47.8703 55.4655C53.5665 55.4655 57.6051 51.7193 57.6051 46.4435C57.6051 41.588 54.0561 38.0195 49.2266 38.0195C46.2626 38.0195 43.8945 39.3737 42.7331 41.7657H42.4168C42.3106 36.5072 44.4296 33.1445 47.918 33.1445C49.9156 33.1445 51.4995 34.1975 51.9935 35.8658H57.2671C56.5456 31.63 52.7843 28.783 47.9548 28.783ZM71.2682 28.783C65.0065 28.783 61.1563 33.671 61.1563 42.0777C61.1563 50.4995 64.9718 55.4655 71.2682 55.4655C77.5645 55.4655 81.367 50.4865 81.367 42.1015C81.367 33.6732 77.5103 28.783 71.2682 28.783ZM71.2682 33.1272C74.1736 33.1272 75.972 36.167 75.972 42.0777C75.972 48.023 74.1931 51.1365 71.2682 51.1343C68.3583 51.1343 66.5578 48.0035 66.5578 42.0777C66.5578 36.1865 68.3735 33.1272 71.2682 33.1272ZM47.8291 42.1123C50.492 42.1123 52.4311 44.0147 52.4311 46.5995C52.4311 49.1475 50.4248 51.104 47.8161 51.104C45.2053 51.104 43.2076 49.1302 43.2076 46.5453C43.2076 44.0125 45.1641 42.1123 47.8291 42.1123ZM10.582 58.9712C10.582 58.9712 4.43732 60.5637 4.43732 68.16C4.43732 76.597 13.7063 83.4762 38.233 83.4762V87.5863C38.233 89.3132 40.2761 90.2383 41.5826 89.0987L50.895 80.9758C52.1646 79.8687 52.1646 77.897 50.895 76.7877L41.5826 68.6627C40.2761 67.523 38.233 68.446 38.233 70.1772V74.2873C17.2553 74.2873 9.04582 69.3148 9.04582 65.0985C9.04582 63.0878 10.582 62.0348 10.582 62.0348V58.9712ZM84.3201 58.9712V62.0348C84.3201 62.0348 85.8563 63.0878 85.8563 65.0985C85.8563 69.3148 77.6468 74.2873 56.6691 74.2873V83.4762C81.1958 83.4762 90.4648 76.597 90.4648 68.16C90.4648 60.5637 84.3201 58.9712 84.3201 58.9712Z"
                  fill="#2B7FAF"
                />
                <path
                  d="M108.965 29.8583H92.6523C92.3273 29.8583 92.1106 30.075 92.1106 30.3978V34.2523C92.1106 34.5751 92.3273 34.7918 92.6523 34.7918H98.0169V54.5258C98.0169 54.8486 98.2336 55.0653 98.5564 55.0653H103.059C103.382 55.0653 103.598 54.8486 103.598 54.5258V34.7918H108.965C109.288 34.7918 109.505 34.5751 109.505 34.2523V30.3978C109.505 30.075 109.288 29.8583 108.965 29.8583Z"
                  fill="#2B7FAF"
                />
                <path
                  d="M134.672 54.4521L125.958 30.2895C125.85 30.0013 125.564 29.8583 125.275 29.8583H121.133C120.845 29.8583 120.63 30.0013 120.522 30.2895L111.807 54.4521C111.662 54.814 111.842 55.0653 112.239 55.0653H116.921C117.209 55.0653 117.423 54.957 117.532 54.6341L118.793 50.745H127.687L128.948 54.6341C129.056 54.957 129.271 55.0653 129.559 55.0653H134.241C134.638 55.0653 134.817 54.814 134.672 54.4521ZM120.305 46.2426L123.258 37.2033L126.211 46.2426H120.305Z"
                  fill="#2B7FAF"
                />
                <path
                  d="M157.501 54.4175L150.154 42.1736L157.142 30.5061C157.356 30.1096 157.213 29.8583 156.78 29.8583H152.028C151.74 29.8583 151.523 29.9666 151.378 30.218L147.201 37.2033L143.026 30.218C142.881 29.9666 142.664 29.8583 142.376 29.8583H137.624C137.191 29.8583 137.048 30.1096 137.262 30.5061L144.25 42.1736L136.903 54.4175C136.686 54.814 136.831 55.0653 137.262 55.0653H142.016C142.304 55.0653 142.521 54.957 142.664 54.7056L147.201 47.1071L151.74 54.7056C151.883 54.957 152.1 55.0653 152.388 55.0653H157.142C157.573 55.0653 157.716 54.814 157.501 54.4175Z"
                  fill="#2B7FAF"
                />
                <path
                  d="M175.035 50.1318H166.537V44.6588H174.495C174.818 44.6588 175.035 44.4421 175.035 44.1193V40.2648C175.035 39.942 174.818 39.7253 174.495 39.7253H166.537V34.7918H175C175.323 34.7918 175.54 34.5751 175.54 34.2523V30.3978C175.54 30.075 175.323 29.8583 175 29.8583H161.495C161.17 29.8583 160.956 30.075 160.956 30.3978V54.5258C160.956 54.8486 161.17 55.0653 161.495 55.0653H175.035C175.36 55.0653 175.574 54.8486 175.574 54.5258V50.6713C175.574 50.3485 175.36 50.1318 175.035 50.1318Z"
                  fill="#2B7FAF"
                />
                <path
                  d="M185.08 36.952C185.08 35.8361 186.016 34.8286 187.817 34.8286C189.472 34.8286 190.662 35.4028 192.462 36.6638C192.75 36.8805 193.002 36.8436 193.218 36.5208L195.558 33.676C195.775 33.3878 195.775 33.1711 195.487 32.9198C193.435 30.9026 190.878 29.5701 187.637 29.5701C183.494 29.5701 179.607 32.2351 179.607 36.8436C179.607 45.09 191.021 43.8311 191.021 47.755C191.021 49.3388 189.509 50.2401 187.78 50.2401C185.691 50.2401 184.071 49.4471 182.236 47.9348C181.947 47.6835 181.622 47.755 181.443 48.0063L178.957 50.7796C178.743 51.0331 178.743 51.2845 178.923 51.5358C180.47 53.5898 183.856 55.4965 187.637 55.4965C191.923 55.4965 196.494 52.9398 196.494 47.8633C196.494 39.0775 185.08 40.9126 185.08 36.952Z"
                  fill="#2B7FAF"
                />
              </g>
              <defs>
                <clipPath id="clip0_9_2">
                  <rect width="208" height="101" fill="white" />
                </clipPath>
              </defs>
            </svg>
            <div className="nav-list">
              <ul>
                <li>
                  <a href="/">Home</a>
                </li>
                <li>
                  <a href="/">Sales Tax Calculator</a>
                </li>
              </ul>
            </div>
          </div>
          <div id="menuToggle">
            <input
              type="checkbox"
              onChange={(e) => {
                if (e.target.checked) {
                  window.onscroll = function () {
                    window.scrollTo(0, 0);
                  };
                } else {
                  window.onscroll = function () {};
                }
                this.setState({ isChecked: e.target.checked });
              }}
            />

            <span></span>
            <span></span>
            <span></span>

            <ul id="menu">
              <a href="/">
                <li>Home</li>
              </a>
              <a href="/">
                <li>Sales Tax Calculator</li>
              </a>
              <a href="/">
                <li>Info</li>
              </a>
              <a href="/">
                <li>Contact</li>
              </a>
            </ul>
          </div>

          <div className="content-wrapper">
            <div className="search-wrapper active">
              <input
                value={this.state.search}
                onChange={(e) => {
                  let results = this.findData(
                    e.target.value.toLowerCase()
                  ).slice(0, 20);
                  if (e.target.value === "") results = [];
                  this.setState({
                    search: e.target.value,
                    results,
                  });
                }}
                type="text"
                placeholder="Search..."
                id="mysearch"
              />

              <div className="search-icon"></div>
            </div>

            <ul className="search-result-list">
              {this.state.results.map((item) => {
                return (
                  <li
                    key={item.zip_code}
                    onClick={(e) => {
                      e.stopPropagation();
                      this.setState({ search: "", results: [] });
                    }}
                  >
                    <a
                      href={`/sales-tax-calculator/${item.state}/${item.city}/${item.zip_code}`}
                    >
                      <div>
                        <span>
                          {item.city}, {item.county}({item.state})
                        </span>
                        <span>{item.zip_code}</span>
                      </div>
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>
        </div>
      </nav>
    );
  }
}
export default NavBar;
